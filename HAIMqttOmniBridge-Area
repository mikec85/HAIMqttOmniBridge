metadata {
    definition (name: "HAIMqttOmniBridge-Area", namespace: "Omnipro", author: "Test") {
        capability "Initialize"
        capability "Lock Codes"
		capability "Security Keypad"
        capability "Momentary"
		capability "Actuator"
		capability "TamperAlert"
        capability "PushableButton"
        
        attribute "status", "enum", ["disarmed", "armed_night", "armed_day", "armed_away", "armed_vacation", "pending"]
        
        command "publishMsg", ["String"]
        command "armHome"
        command "armNight"
        command "armAway"
        command "disarm"
        command "updated"
        command "push"
                
    }

    preferences {
        section("Device Settings:") {
            input "MqttIP", "string", title:"MqttIP", description: "", required: true, displayDuringSetup: true
            input "area", "string", title:"Area", description: "", required: true, displayDuringSetup: true
            input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
        }
    }
    tiles (scale: 2)
	{
        standardTile("AlarmDisarm", "disarm", height: 2, width: 2, decoration:"flat", inactiveLabel: false)
		{
			state "inactive", label:"Disarm", action:"AlarmDisarm", backgroundColor:"#D8D8D8"
			state "changing", label:"Disarming", action:"", backgroundColor:"#FF9900"
			state "active", label:"Disarmed", action:"", backgroundColor:"#00CC00"
		}
    }
}

void installed() {
    log.warn "mqtt installed..."
    initialize()
}

def logsOff() {
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value: "false", type: "bool"])
}

def updated() {
    log.info "updated..."
    initialize()
    log.warn "debug logging is: ${logEnable == true}"
    if (logEnable) runIn(1800, logsOff)
    runIn(1800, CheckMQTTConnection)
}

void CheckMQTTConnection() {
    if (interfaces.mqtt.isConnected())  { 
        if (logEnable) log.warn "Is Connected"
    } 
    else { 
        if (logEnable)log.warn "Not Connected"
        initialize()
    }
    runIn(1800, CheckMQTTConnection)    
}
def commandHSM(action){
    log.debug "commandHSM - ${action}"
    log.info("commandHSM")
}
void parse(String description) {
    log.info("parse")
    if (interfaces.mqtt.parseMessage(description).topic == "omnilink/${area}/state"){
       if (logEnable) log.debug "parse description ${description}"
       if (logEnable) log.debug interfaces.mqtt.parseMessage(description).payload
       state = interfaces.mqtt.parseMessage(description)
       if (logEnable) log.debug("Alarm ${interfaces.mqtt.parseMessage(description).payload}")
       status=interfaces.mqtt.parseMessage(description).payload 
       sendEvent(name: "status", value: interfaces.mqtt.parseMessage(description).payload)
    }
}

void publishMsg(String s) {
    if (logEnable) log.info "publish in omnilink/${area}/command   ${s}"
    interfaces.mqtt.publish("omnilink/${area}/command", s)
}

void uninstalled() {
    if (logEnable) log.info "disconnecting from mqtt"
    interfaces.mqtt.disconnect()
}
void initialize() {
    try {
        def mqttInt = interfaces.mqtt
        //open connection
        if (!interfaces.mqtt.isConnected()) { 
            mqttInt.connect("tcp://${settings.MqttIP}:1883", "HubitatArea${area}", null, null)
        }
        //give it a chance to start
        pauseExecution(1000)
        if (logEnable) log.info "connection established"
        interfaces.mqtt.publish("hubitat/HubitatArea${area}/" + 'client',"${new Date()}",1,true)
        mqttInt.subscribe("omnilink/${area}/state")
        if (logEnable) log.info "Subscribed to omnilink/${area}/state"
        
    } catch(e) {
        log.debug "mqtt initialize error: ${e.message}"
    }
}

void mqttClientStatus(String message) {
	if (logEnable) log.info "Mqtt Received status message ${message}"
}

void armHome() {
    publishMsg("arm_home")
}
def changeMode(mode) {

log.info "Changing Mode to: $mode"

}
def setArmed() {

log.info "setArmed"

}
def button(test) {
log.info "button"
}
def setMode(test) {

log.info "setMode"

}
void armNight() {
    publishMsg("arm_night")
}

void armAway() {
    publishMsg("arm_away")
}

void disarm() {
    log.info "disarm"
    publishMsg("disarm")
}


def push(btn) {
    log.info btn
    if(btn=="armAway"){
		publishMsg("arm_away")
		return
	}
    if(btn=="disarm"){
		publishMsg("disarm")
        log.info "Pushed Disarm"
		return
	}
    if(btn=="armNight"){
		publishMsg("arm_night")
		return
	}
    log.info "push"
}
