metadata {
    definition (name: "HAIMqttOmniBridge-Garage", namespace: "Omnipro", author: "Test") {
        capability "Initialize"
        capability "Garage Door Control"
       
        attribute "door", "string"
        command "publishMsg", ["String"]
    }

    preferences {
        section("Device Settings:") {
            input "MqttIP", "string", title:"MqttIP", description: "", required: true, displayDuringSetup: true
            input "zone", "string", title:"Zone", description: "", required: true, displayDuringSetup: true
            input "buttonopen", "string", title:"Button Open", description: "", required: true, displayDuringSetup: true
            input "buttonclose", "string", title:"Button Close", description: "", required: true, displayDuringSetup: true
            input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
        }
    }

    tiles {
        standardTile("toggle", "device.door", width: 2, height: 2) {
            state("closed", label:'${name}', action:"door control.open", icon:"st.doors.garage.garage-closed", backgroundColor:"#79b821", nextState:"opening")
            state("open", label:'${name}', action:"door control.close", icon:"st.doors.garage.garage-open", backgroundColor:"#ffa81e", nextState:"closing")
            state("opening", label:'${name}', icon:"st.doors.garage.garage-closed", backgroundColor:"#ffe71e")
            state("closing", label:'${name}', icon:"st.doors.garage.garage-open", backgroundColor:"#ffe71e")

        }
        standardTile("open", "device.door", inactiveLabel: false, decoration: "flat") {
            state "default", label:"open", action:"door control.open", icon:"st.doors.garage.garage-opening"
        }
        standardTile("close", "device.door", inactiveLabel: false, decoration: "flat") {
            state "default", label:"close", action:"door control.close", icon:"st.doors.garage.garage-closing"
        }

        main "toggle"
        details(["toggle", "open", "close"])
    }
}

def logsOff() {
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value: "false", type: "bool"])
}

void installed() {
    log.warn "mqtt installed..."
    initialize()
}

void parse(String description) {
    if (logEnable) log.debug description
    if (logEnable) log.debug interfaces.mqtt.parseMessage(description).payload
    state = interfaces.mqtt.parseMessage(description)
    if ( interfaces.mqtt.parseMessage(description).payload == "secure") {
        if (logEnable) log.debug("Door secure")
        door="closed"
        sendEvent(name: "door", value: "closed")
    } else {
        if (logEnable) log.debug("Door open")
        door="open"
        sendEvent(name: "door", value: "open")
    }    
        
}

void publishMsg(String s) {
    interfaces.mqtt.publish("omnilink/${button}/command", s)
}

void updated() {
    log.info "updated..."
    initialize()
    log.warn "debug logging is: ${logEnable == true}"
    if (logEnable) runIn(1800, logsOff)
}

void uninstalled() {
    log.info "disconnecting from mqtt"
    interfaces.mqtt.disconnect()
}

void initialize() {
    try {
        def mqttInt = interfaces.mqtt
        //open connection
        mqttInt.connect("tcp://${settings.MqttIP}:1883", "haig${zone}", null, null)
        //give it a chance to start
        pauseExecution(1000)
        log.info "connection established"
        mqttInt.subscribe("omnilink/${zone}/state")
        log.info "Subscribed to omnilink/${zone}/state"
        publishMsg("TestingMqtt")
    } catch(e) {
        log.debug "mqtt initialize error: ${e.message}"
    }
}

void mqttClientStatus(String message) {
	log.info "Mqtt Received status message ${message}"
}

void open() {
	if (device.currentValue("contact") != "open") {
		log.debug "Open Called Sending ACTUATE event to open door    door is ${device.currentValue("door")}"
		interfaces.mqtt.publish("omnilink/${buttonopen}/command", "ON")
	}
	else {
		log.debug "Not opening door since it is already open"
	}
}

void close() {
	if (device.currentValue("contact") != "closed") {
		log.debug "Close Called Sending ACTUATE event to close door"
		interfaces.mqtt.publish("omnilink/${buttonclose}/command", "ON")
	}
	else {
		log.debug "Not closing door since it is already closed"
	}
}
